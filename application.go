package main

import (
	_ "my-pointlings-be/docs" // docs is generated by Swag CLI, you have to import it.
	"net/http"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title Pointlings API
// @version 1.0
// @description This is a sample server for Pointlings MVP.
// @host localhost:8080
// @BasePath /api/v1

func main() {
	r := gin.Default()

	// Swagger endpoint
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// API v1 group
	v1 := r.Group("/api/v1")
	{
		// Users endpoints
		v1.GET("/users", listUsers)
		v1.POST("/users", createUser)
		v1.GET("/users/:user_id", getUser)
		v1.PATCH("/users/:user_id/points", updateUserPoints)

		// Pointlings endpoints
		v1.POST("/pointlings", createPointling)
		v1.GET("/pointlings/:pointling_id", getPointling)
		v1.POST("/pointlings/:pointling_id/xp", addXP)
		v1.GET("/pointlings/:pointling_id/xp/history", getXPHistory)
		v1.PATCH("/pointlings/:pointling_id/nickname", updateNickname)
		v1.GET("/pointlings/user/:user_id", listUserPointlings)

		// Items endpoints
		v1.GET("/items", listItems)
		v1.GET("/items/:item_id", getItem)
		v1.POST("/items", createItem)

		// Pointling inventory endpoints
		v1.GET("/pointlings/:pointling_id/items", getInventory)
		v1.POST("/pointlings/:pointling_id/items/:item_id", acquireItem)
		v1.PATCH("/pointlings/:pointling_id/items/:item_id/equip", toggleEquipped)

		// Points spending
		v1.POST("/users/:user_id/points/spend", spendPoints)
		v1.GET("/users/:user_id/points/history", getSpendHistory)
	}

	r.Run(":8080")
}

func listUsers(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "listUsers"})
}

// @Summary Create a new user
// @Description Create a new user with the provided details
// @Tags users
// @Accept json
// @Produce json
// @Param user body models.User true "User object"
// @Success 201 {object} models.User "User created successfully"
// @Failure 400 {object} handlers.ErrorResponse "Invalid request"
// @Failure 500 {object} handlers.ErrorResponse "Internal server error"
// @Router /users [post]
func createUser(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "createUser"})
}

// @Summary Get user by ID
// @Description Get a user's details by their ID
// @Tags users
// @Accept json
// @Produce json
// @Param user_id path int true "User ID"
// @Success 200 {object} models.User "User found"
// @Failure 404 {object} handlers.ErrorResponse "User not found"
// @Failure 500 {object} handlers.ErrorResponse "Internal server error"
// @Router /users/{user_id} [get]
func getUser(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "getUser"})
}

func updateUserPoints(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "updateUserPoints"})
}

func createPointling(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "createPointling"})
}

func getPointling(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "getPointling"})
}

func addXP(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "addXP"})
}

func getXPHistory(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "getXPHistory"})
}

func updateNickname(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "updateNickname"})
}

func listUserPointlings(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "listUserPointlings"})
}

func listItems(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "listItems"})
}

func getItem(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "getItem"})
}

func createItem(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "createItem"})
}

func getInventory(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "getInventory"})
}

func acquireItem(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "acquireItem"})
}

func toggleEquipped(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "toggleEquipped"})
}

func spendPoints(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "spendPoints"})
}

func getSpendHistory(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "getSpendHistory"})
}
