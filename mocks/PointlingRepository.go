// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "my-pointlings-be/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// PointlingRepository is an autogenerated mock type for the PointlingRepository type
type PointlingRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: pointling
func (_m *PointlingRepository) Create(pointling *models.Pointling) error {
	ret := _m.Called(pointling)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Pointling) error); ok {
		r0 = rf(pointling)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *PointlingRepository) GetByID(id int64) (*models.Pointling, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Pointling
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.Pointling, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.Pointling); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Pointling)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *PointlingRepository) GetByUserID(userID int64) ([]*models.Pointling, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []*models.Pointling
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*models.Pointling, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) []*models.Pointling); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Pointling)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLevel provides a mock function with given fields: id, level
func (_m *PointlingRepository) UpdateLevel(id int64, level int) error {
	ret := _m.Called(id, level)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLevel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int) error); ok {
		r0 = rf(id, level)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLook provides a mock function with given fields: id, look
func (_m *PointlingRepository) UpdateLook(id int64, look models.JSONMap) error {
	ret := _m.Called(id, look)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, models.JSONMap) error); ok {
		r0 = rf(id, look)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNickname provides a mock function with given fields: id, nickname
func (_m *PointlingRepository) UpdateNickname(id int64, nickname *string) error {
	ret := _m.Called(id, nickname)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNickname")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, *string) error); ok {
		r0 = rf(id, nickname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateXP provides a mock function with given fields: id, currentXP, requiredXP
func (_m *PointlingRepository) UpdateXP(id int64, currentXP int, requiredXP int) error {
	ret := _m.Called(id, currentXP, requiredXP)

	if len(ret) == 0 {
		panic("no return value specified for UpdateXP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int, int) error); ok {
		r0 = rf(id, currentXP, requiredXP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPointlingRepository creates a new instance of PointlingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPointlingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PointlingRepository {
	mock := &PointlingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
