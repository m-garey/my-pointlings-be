// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "my-pointlings-be/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// PointlingItemRepository is an autogenerated mock type for the PointlingItemRepository type
type PointlingItemRepository struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: pointlingID, itemID
func (_m *PointlingItemRepository) AddItem(pointlingID int64, itemID int64) error {
	ret := _m.Called(pointlingID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(pointlingID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEquippedInSlot provides a mock function with given fields: pointlingID, slot
func (_m *PointlingItemRepository) GetEquippedInSlot(pointlingID int64, slot models.ItemSlot) (*models.PointlingItem, error) {
	ret := _m.Called(pointlingID, slot)

	if len(ret) == 0 {
		panic("no return value specified for GetEquippedInSlot")
	}

	var r0 *models.PointlingItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, models.ItemSlot) (*models.PointlingItem, error)); ok {
		return rf(pointlingID, slot)
	}
	if rf, ok := ret.Get(0).(func(int64, models.ItemSlot) *models.PointlingItem); ok {
		r0 = rf(pointlingID, slot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PointlingItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, models.ItemSlot) error); ok {
		r1 = rf(pointlingID, slot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItems provides a mock function with given fields: pointlingID, equipped
func (_m *PointlingItemRepository) GetItems(pointlingID int64, equipped *bool) ([]*models.PointlingItem, error) {
	ret := _m.Called(pointlingID, equipped)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []*models.PointlingItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, *bool) ([]*models.PointlingItem, error)); ok {
		return rf(pointlingID, equipped)
	}
	if rf, ok := ret.Get(0).(func(int64, *bool) []*models.PointlingItem); ok {
		r0 = rf(pointlingID, equipped)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PointlingItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, *bool) error); ok {
		r1 = rf(pointlingID, equipped)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InTransaction provides a mock function with given fields: fn
func (_m *PointlingItemRepository) InTransaction(fn func(models.PointlingItemRepository) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for InTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(models.PointlingItemRepository) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ToggleEquipped provides a mock function with given fields: pointlingID, itemID, equipped
func (_m *PointlingItemRepository) ToggleEquipped(pointlingID int64, itemID int64, equipped bool) error {
	ret := _m.Called(pointlingID, itemID, equipped)

	if len(ret) == 0 {
		panic("no return value specified for ToggleEquipped")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, bool) error); ok {
		r0 = rf(pointlingID, itemID, equipped)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPointlingItemRepository creates a new instance of PointlingItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPointlingItemRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PointlingItemRepository {
	mock := &PointlingItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
