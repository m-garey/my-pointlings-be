// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "my-pointlings-be/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// PointSpendRepository is an autogenerated mock type for the PointSpendRepository type
type PointSpendRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: spend
func (_m *PointSpendRepository) Create(spend *models.PointSpend) error {
	ret := _m.Called(spend)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.PointSpend) error); ok {
		r0 = rf(spend)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUser provides a mock function with given fields: userID, limit, offset
func (_m *PointSpendRepository) GetByUser(userID int64, limit int, offset int) ([]*models.PointSpend, error) {
	ret := _m.Called(userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []*models.PointSpend
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int, int) ([]*models.PointSpend, error)); ok {
		return rf(userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int64, int, int) []*models.PointSpend); ok {
		r0 = rf(userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.PointSpend)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int, int) error); ok {
		r1 = rf(userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalSpentByUser provides a mock function with given fields: userID
func (_m *PointSpendRepository) GetTotalSpentByUser(userID int64) (int64, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetTotalSpentByUser")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (int64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InTransaction provides a mock function with given fields: fn
func (_m *PointSpendRepository) InTransaction(fn func(models.PointSpendRepository) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for InTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(models.PointSpendRepository) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SpendPoints provides a mock function with given fields: userID, itemID, points
func (_m *PointSpendRepository) SpendPoints(userID int64, itemID int64, points int) error {
	ret := _m.Called(userID, itemID, points)

	if len(ret) == 0 {
		panic("no return value specified for SpendPoints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, int) error); ok {
		r0 = rf(userID, itemID, points)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPointSpendRepository creates a new instance of PointSpendRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPointSpendRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PointSpendRepository {
	mock := &PointSpendRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
