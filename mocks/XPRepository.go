// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "my-pointlings-be/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// XPRepository is an autogenerated mock type for the XPRepository type
type XPRepository struct {
	mock.Mock
}

// AddXP provides a mock function with given fields: event
func (_m *XPRepository) AddXP(event *models.XPEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for AddXP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.XPEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDailyXPBySource provides a mock function with given fields: pointlingID, source
func (_m *XPRepository) GetDailyXPBySource(pointlingID int64, source models.XPEventSource) (int, error) {
	ret := _m.Called(pointlingID, source)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyXPBySource")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, models.XPEventSource) (int, error)); ok {
		return rf(pointlingID, source)
	}
	if rf, ok := ret.Get(0).(func(int64, models.XPEventSource) int); ok {
		r0 = rf(pointlingID, source)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int64, models.XPEventSource) error); ok {
		r1 = rf(pointlingID, source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByPointling provides a mock function with given fields: pointlingID, limit
func (_m *XPRepository) GetEventsByPointling(pointlingID int64, limit int) ([]*models.XPEvent, error) {
	ret := _m.Called(pointlingID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByPointling")
	}

	var r0 []*models.XPEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) ([]*models.XPEvent, error)); ok {
		return rf(pointlingID, limit)
	}
	if rf, ok := ret.Get(0).(func(int64, int) []*models.XPEvent); ok {
		r0 = rf(pointlingID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.XPEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(pointlingID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InTransaction provides a mock function with given fields: fn
func (_m *XPRepository) InTransaction(fn func(models.XPRepository) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for InTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(models.XPRepository) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewXPRepository creates a new instance of XPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewXPRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *XPRepository {
	mock := &XPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
