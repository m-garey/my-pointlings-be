package application

import (
	"context"
	"database/sql"
	"log"
	_ "my-pointlings-be/docs" // docs is generated by Swag CLI, you have to import it.
	"my-pointlings-be/pkg/config"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"my-pointlings-be/internal/handler"
	"my-pointlings-be/internal/repository"
	"my-pointlings-be/internal/service"

	"github.com/gin-gonic/gin"
	_ "github.com/jackc/pgx/v5/stdlib"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

func Run() {
	cfg := config.Load()

	db := setupDB(cfg)

	pointlingRepo := repository.New(db)
	pointlingService := service.New(pointlingRepo)
	pointlingHandler := handler.New(pointlingService)
	router := setupRouter()
	setupPointlingRouter(router, pointlingHandler)

	srv := &http.Server{
		Addr:    cfg.HTTPAddr,
		Handler: router,
	}

	// Start server in goroutine for graceful shutdown
	go func() {
		log.Printf("HTTP server listening on %s", cfg.HTTPAddr)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("failed to start server: %v", err)
		}
	}()

	// Wait for interrupt signal
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("shutting down server...")

	// Gracefully shutdown with 10s timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Fatalf("server shutdown failed: %v", err)
	}

	log.Println("server stopped gracefully")
}

func setupDB(cfg *config.Config) *sql.DB {
	// Connect to Supabase Postgres via pgx driver
	db, err := sql.Open("pgx", cfg.DBAddr)
	if err != nil {
		log.Fatalf("failed to connect to database: %v", err)
	}
	defer db.Close()

	// Verify connection
	if err := db.Ping(); err != nil {
		log.Fatalf("failed to ping database: %v", err)
	}

	return db
}

func setupRouter() *gin.Engine {
	r := gin.Default()

	// Middleware
	r.Use(gin.Logger())
	r.Use(gin.Recovery())

	// Swagger endpoint
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Health Check
	r.GET("/health", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"status": "healthy",
		})
	})

	return r
}

func setupPointlingRouter(
	r *gin.Engine,
	pointlingHandler handler.API) {

	api := r.Group("/api")
	{
		// User endpoints
		api.GET("/users", pointlingHandler.ListUsers)
		api.POST("/users", pointlingHandler.CreateUser)
		api.GET("/users/:user_id", pointlingHandler.GetUser)
		api.PATCH("/users/:user_id/points", pointlingHandler.UpdateUserPoints)

		// Pointlings endpoints
		api.POST("/pointlings", pointlingHandler.CreatePointling)
		api.GET("/pointlings/:pointling_id", pointlingHandler.GetPointling)
		api.POST("/pointlings/:pointling_id/xp", pointlingHandler.AddXP)
		api.PATCH("/pointlings/:pointling_id/nickname", pointlingHandler.UpdateNickname)
		api.GET("/pointlings/user/:user_id", pointlingHandler.ListUserPointlings)

		// Items endpoints
		api.GET("/items", pointlingHandler.ListItems)
		api.GET("/items/:item_id", pointlingHandler.GetItem)
		api.POST("/items", pointlingHandler.CreateItem)

		// Pointling inventory endpoints
		api.GET("/pointlings/:pointling_id/items", pointlingHandler.GetInventory)
		api.POST("/pointlings/:pointling_id/items/:item_id", pointlingHandler.AcquireItem)
		api.PATCH("/pointlings/:pointling_id/items/:item_id/equip", pointlingHandler.ToggleEquipped)

		// Points spending
		api.POST("/users/:user_id/points/spend", pointlingHandler.SpendPoints)
	}
}
