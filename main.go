package main

import (
	"database/sql"
	"log"
	_ "my-pointlings-be/docs" // docs is generated by Swag CLI
	"my-pointlings-be/internal/handlers"
	"my-pointlings-be/internal/repository"
	"my-pointlings-be/pkg/config"

	"github.com/gin-gonic/gin"
	_ "github.com/jackc/pgx/v5/stdlib"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title           Pointlings API
// @version         1.0
// @description     API for managing Pointlings, users, items, and XP system
// @host            localhost:8080
// @BasePath        /api/v1
// @schemes         http
// @produce         json
// @consumes        json

// @tag.name        Users
// @tag.description User management endpoints including creation, retrieval, and point balance updates

// @tag.name        Pointlings
// @tag.description Pointling management including creation, customization, and XP system

// @tag.name        Items
// @tag.description Item catalog and inventory management for Pointlings

// @tag.name        XP
// @tag.description Experience points system for Pointlings including gaining XP and leveling up

func main() {
	cfg := config.Load()

	// Connect to Supabase Postgres via pgx driver
	db, err := sql.Open("pgx", cfg.DBAddr)
	if err != nil {
		log.Fatalf("failed to connect to database: %v", err)
	}
	defer db.Close()

	// Verify connection
	if err := db.Ping(); err != nil {
		log.Fatalf("failed to ping database: %v", err)
	}

	// Initialize repositories
	repo := repository.New(db)

	// Initialize handlers
	userHandler := handlers.NewUserHandler(repo)
	pointlingHandler := handlers.NewPointlingHandler(repo)
	xpHandler := handlers.NewXPHandler(repo)
	itemHandler := handlers.NewItemHandler(repo)
	pointHandler := handlers.NewPointHandler(repo)

	r := gin.Default()

	// Swagger endpoint
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// API v1 group
	v1 := r.Group("/api/v1")
	{
		// Set up routes for each handler
		userHandler.Routes(v1)
		pointlingHandler.Routes(v1)
		itemHandler.Routes(v1)
		xpHandler.Routes(v1)
		pointHandler.Routes(v1)
	}

	log.Printf("Server starting on http://localhost:8080")
	if err := r.Run(":8080"); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}
